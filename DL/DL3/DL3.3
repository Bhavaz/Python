{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"DL3.3","version":"0.3.2","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"A5Htq0xeFMDv","colab_type":"code","outputId":"a92c517d-a990-43b7-b13d-c6e6763661bb","executionInfo":{"status":"ok","timestamp":1562869379133,"user_tz":300,"elapsed":29909,"user":{"displayName":"bhavaz Akula","photoUrl":"https://lh6.googleusercontent.com/-s3FsBBt0_YM/AAAAAAAAAAI/AAAAAAAAAGU/r_PahSF1pk0/s64/photo.jpg","userId":"04526873242377407941"}},"colab":{"base_uri":"https://localhost:8080/","height":394}},"source":["from keras.models import Sequential\n","from keras import layers\n","from keras.preprocessing.text import Tokenizer, one_hot\n","import pandas as pd\n","from keras_preprocessing.sequence import pad_sequences\n","from sklearn import preprocessing\n","from sklearn.model_selection import train_test_split\n","from keras.layers import Flatten\n","from sympy import categories\n","\n","from sklearn.datasets import fetch_20newsgroups\n","newsgroups_train =fetch_20newsgroups(subset='train', shuffle=True)\n","sentences = newsgroups_train.data\n","y = newsgroups_train.target\n","# sentences = data['review'].values\n","# y = data['label'].values\n","\n","max_review_len= max([len(s.split()) for s in sentences])\n","#tokenizing data\n","tokenizer = Tokenizer(num_words=2000)\n","tokenizer.fit_on_texts(sentences)\n","#getting the vocabulary of data\n","sentences = tokenizer.texts_to_sequences(sentences)\n","padded_docs= pad_sequences(sentences,maxlen=max_review_len)\n","\n","le = preprocessing.LabelEncoder()\n","y = le.fit_transform(y)\n","X_train, X_test, y_train, y_test = train_test_split(padded_docs, y, test_size=0.25, random_state=1000)\n","vocab_size= len(tokenizer.word_index)+1\n","# Number of features\n","# print(input_dim)\n","model = Sequential()\n","model.add(layers.Embedding(vocab_size, 50, input_length=max_review_len))\n","model.add(layers.Flatten())\n","model.add(layers.Dense(300,activation='relu'))\n","model.add(layers.Dense(20, activation='softmax'))\n","model.compile(loss='sparse_categorical_crossentropy',optimizer='adam',metrics=['acc'])\n","# summarize the model\n","print(model.summary())\n","history=model.fit(X_train,y_train, epochs=2, verbose=True, validation_data=(X_test,y_test), batch_size=256)\n","# print(history)"],"execution_count":21,"outputs":[{"output_type":"stream","text":["_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","embedding_1 (Embedding)      (None, 11821, 50)         6707150   \n","_________________________________________________________________\n","flatten_1 (Flatten)          (None, 591050)            0         \n","_________________________________________________________________\n","dense_11 (Dense)             (None, 300)               177315300 \n","_________________________________________________________________\n","dense_12 (Dense)             (None, 20)                6020      \n","=================================================================\n","Total params: 184,028,470\n","Trainable params: 184,028,470\n","Non-trainable params: 0\n","_________________________________________________________________\n","None\n","Train on 8485 samples, validate on 2829 samples\n","Epoch 1/2\n","8485/8485 [==============================] - 13s 2ms/step - loss: 14.3762 - acc: 0.0574 - val_loss: 14.5449 - val_acc: 0.0700\n","Epoch 2/2\n","8485/8485 [==============================] - 9s 1ms/step - loss: 14.1851 - acc: 0.0712 - val_loss: 6.7288 - val_acc: 0.0537\n"],"name":"stdout"}]}]}